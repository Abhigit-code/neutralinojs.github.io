(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{111:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return m}));var o=t(0),i=t.n(o);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,i=function(e,n){if(null==e)return{};var t,o,i={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=i.a.createContext({}),u=function(e){var n=i.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=u(e.components);return i.a.createElement(c.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},d=i.a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(t),d=o,m=p["".concat(s,".").concat(d)]||p[d]||b[d]||a;return t?i.a.createElement(m,r(r({ref:n},c),{},{components:t})):i.a.createElement(m,r({ref:n},c))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,s=new Array(a);s[0]=d;var r={};for(var l in n)hasOwnProperty.call(n,l)&&(r[l]=n[l]);r.originalType=e,r.mdxType="string"==typeof e?e:o,s[1]=r;for(var c=2;c<a;c++)s[c]=t[c];return i.a.createElement.apply(null,s)}return i.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},83:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return s})),t.d(n,"metadata",(function(){return r})),t.d(n,"toc",(function(){return l})),t.d(n,"default",(function(){return u}));var o=t(3),i=t(8),a=(t(0),t(111)),s={title:"Extensions Overview"},r={unversionedId:"how-to/extensions-overview",id:"how-to/extensions-overview",isDocsHomePage:!1,title:"Extensions Overview",description:"Neutralinos framework offers a native API to perform various operating-system-level operations such as accessing",source:"@site/docs/how-to/extensions-overview.md",slug:"/how-to/extensions-overview",permalink:"/docs/how-to/extensions-overview",editUrl:"https://github.com/neutralinojs/neutralinojs.github.io/edit/main/docs/how-to/extensions-overview.md",version:"current",sidebar:"docs",previous:{title:"Modes",permalink:"/docs/configuration/modes"},next:{title:"Auto Updater",permalink:"/docs/how-to/auto-updater"}},l=[{value:"Defining the extensions",id:"defining-the-extensions",children:[]},{value:"Enable the extensions feature",id:"enable-the-extensions-feature",children:[]},{value:"Connecting an extension with Neutralinojs",id:"connecting-an-extension-with-neutralinojs",children:[]},{value:"Sending a message from app to an extension",id:"sending-a-message-from-app-to-an-extension",children:[]},{value:"Sending a message from the extension to app",id:"sending-a-message-from-the-extension-to-app",children:[]},{value:"Terminating an extension instance",id:"terminating-an-extension-instance",children:[]},{value:"Using Neutralinojs from your source files",id:"using-neutralinojs-from-your-source-files",children:[]}],c={toc:l};function u(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(a.b)("wrapper",Object(o.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Neutralinos framework offers a native API to perform various operating-system-level operations such as accessing\nfilesystem, executing commands, and showing dialog boxes, etc. You may need other native APIs like database connectors\nto build your applications. But, we can't add all specific APIs to the core and make the framework bloaty. Instead,\nwe offer a WebSocket-based extension system to extend Neutralinojs API without even asking you to build Neutralinojs from source."),Object(a.b)("p",null,"You can write custom backend code for your application with any programming language thanks to the flexible\nextensions API. Also, the extensions API helps you to include Neutralinojs process as a part of any source file."),Object(a.b)("h2",{id:"defining-the-extensions"},"Defining the extensions"),Object(a.b)("p",null,"First, you need to define extensions you use in ",Object(a.b)("inlineCode",{parentName:"p"},"neutralinojs.config.json")," with the following structure."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-json"},'"extensions": [\n    {\n        "id": "js.neutralino.sampleextension",\n        "commandLinux": "${NL_PATH}/extensions/binary/linux/ext_bin",\n        "commandDarwin": "${NL_PATH}/extensions/binary/mac/ext_bin",\n        "commandWindows": "${NL_PATH}/extensions/binary/win/ext_bin.exe"\n    },\n    {\n        "id": "js.neutralino.binaryextension",\n        "command": "node ${NL_PATH}/extensions/binary/main.js",\n    }\n]\n')),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"id")," String: A unique key to identify each extension. This id cannot contain any characters except for letters, numbers, and periods."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"command")," String (optional): A cross-platform command to start the extension. Eg: ",Object(a.b)("inlineCode",{parentName:"li"},"node ${NL_PATH}/extensions/binary/main.js"),"\nwill work on every platform."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"commandLinux")," String (optional): Extension startup command for Linux."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"commandDarwin")," String (optional): Extension startup command for macOS."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"commandWindows")," String (optional): Extension startup command for Windows.")),Object(a.b)("h2",{id:"enable-the-extensions-feature"},"Enable the extensions feature"),Object(a.b)("p",null,"The extensions API is disabled by default. Enable extensions by adding the following setting to your app config."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-json"},'"enableExtensions": true\n')),Object(a.b)("h2",{id:"connecting-an-extension-with-neutralinojs"},"Connecting an extension with Neutralinojs"),Object(a.b)("p",null,"As you already noticed, an extension is just a separate process. Neutralinojs starts spawning extension instances\nduring the framework bootstrap process and initiates each extension process with the following process arguments."),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"--nl-port=<port>"),": port of the Neutralinojs server."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"--nl-token=<token>"),": Access token to use the native API."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"--nl-extension-id=<id>"),": Extension identifier.")),Object(a.b)("p",null,"Now, you can connect with the Neutralinojs server with the above process arguments. Use the following WebSocket\nURL to initiate a new WebSocket connection."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre"},"ws://localhost:{port}?extensionId={extensionId}\n")),Object(a.b)("h2",{id:"sending-a-message-from-app-to-an-extension"},"Sending a message from app to an extension"),Object(a.b)("p",null,"The extensions API uses an event-based messaging protocol. Every message uses the following JSON structure."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-json"},'{\n    "event": "<event_name>",\n    "data" : {\n\n    }\n}\n')),Object(a.b)("p",null,"Use the built-in extensions API to send a message to any extension, as shown below."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"let extension = 'js.neutralino.sampleextension';\nlet event = 'helloExtension';\nlet data = {\n    testValue: 10\n};\n\nawait Neutralino.extensions.dispatch(extension, event, data);\n")),Object(a.b)("p",null,"The above code snippet sends a message to the ",Object(a.b)("inlineCode",{parentName:"p"},"js.neutralino.sampleextension")," extension instance. You can send\nmessages to extensions with the ",Object(a.b)("inlineCode",{parentName:"p"},"dispatch")," function anytime. If you send a message before the extension connects\nwith the main process, the Neutralinojs client library queues and sends it when the target extension's connection is\nestablished. In other words, you don't need to worry about extensions' status when you send messages to\nextensions."),Object(a.b)("h2",{id:"sending-a-message-from-the-extension-to-app"},"Sending a message from the extension to app"),Object(a.b)("p",null,"When you connect your extensions with the Neutralinojs main process, you can call the native API by sending\nWebSocket messages to the Neutralinojs process directly. Neutralinojs server processes messages based on the\nfollowing format."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-json"},'{\n    "id": "<id>",\n    "method": "<method>",\n    "accessToken": "<token>",\n    "data": {\n\n    }\n}\n')),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"id")," String: A ",Object(a.b)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Universally_unique_identifier"},"UUID")," v4 string."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"method")," String: Native method name. Eg: ",Object(a.b)("inlineCode",{parentName:"li"},"window.setTitle"),"."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"accessToken")," String: Access token generated by the Neutralinojs server."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"data")," Object (optional): Parameters for the native method.")),Object(a.b)("p",null,"You can invoke the ",Object(a.b)("inlineCode",{parentName:"p"},"app.broadcast")," native method to send messages to all app instances. Register a callback\nwith the ",Object(a.b)("inlineCode",{parentName:"p"},"events.on")," in the application code to receive the message send by the extension process."),Object(a.b)("h2",{id:"terminating-an-extension-instance"},"Terminating an extension instance"),Object(a.b)("p",null,"Neutralinojs doesn't send kill signals to all extension instances during exit. Therefore, you have to stop\nthe extension process when the WebSocket-based IPC closes. See the following sample Node.js extension:"),Object(a.b)("p",null,Object(a.b)("a",{parentName:"p",href:"https://github.com/neutralinojs/neutralinojs/tree/main/bin/extensions/sampleextension"},"https://github.com/neutralinojs/neutralinojs/tree/main/bin/extensions/sampleextension")),Object(a.b)("h2",{id:"using-neutralinojs-from-your-source-files"},"Using Neutralinojs from your source files"),Object(a.b)("p",null,"The above approach helps you to extend Neutralinojs API with a custom backend code. Neutralinojs process can\nspawn multiple extensions as child processes and communicate with the internal messaging protocol. On the other\nhand, you can spawn Neutralinojs processes from your own processes and communicate with the same messaging\nprotocol. Using this approach, it's possible to write Neutralinojs apps with any backend language."),Object(a.b)("p",null,"You can obtain authentication details for the Neutralinojs process by setting your config as below."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-json"},'"exportAuthInfo": true\n')),Object(a.b)("p",null,"The above setting exports authentication details to ",Object(a.b)("inlineCode",{parentName:"p"},"${NL_PATH}/.tmp/auth_info.json")," with the following format."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-json"},'{\n    "port": "<port>",\n    "accessToken": "<token>"\n}\n')),Object(a.b)("p",null,"Connect with the Neutralinojs process by using the extension API as usual."))}u.isMDXComponent=!0}}]);