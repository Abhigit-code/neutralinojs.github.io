(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{116:function(e,t,a){"use strict";a.d(t,"a",(function(){return m})),a.d(t,"b",(function(){return f}));var i=a(0),n=a.n(i);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,i)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,i,n=function(e,t){if(null==e)return{};var a,i,n={},r=Object.keys(e);for(i=0;i<r.length;i++)a=r[i],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)a=r[i],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var c=n.a.createContext({}),b=function(e){var t=n.a.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},m=function(e){var t=b(e.components);return n.a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.a.createElement(n.a.Fragment,{},t)}},d=n.a.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=b(a),d=i,f=m["".concat(l,".").concat(d)]||m[d]||p[d]||r;return a?n.a.createElement(f,s(s({ref:t},c),{},{components:a})):n.a.createElement(f,s({ref:t},c))}));function f(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,l=new Array(r);l[0]=d;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:i,l[1]=s;for(var c=2;c<r;c++)l[c]=a[c];return n.a.createElement.apply(null,l)}return n.a.createElement.apply(null,a)}d.displayName="MDXCreateElement"},91:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return l})),a.d(t,"metadata",(function(){return s})),a.d(t,"toc",(function(){return o})),a.d(t,"default",(function(){return b}));var i=a(3),n=a(8),r=(a(0),a(116)),l={title:"Neutralino.filesystem"},s={unversionedId:"api/filesystem",id:"api/filesystem",isDocsHomePage:!1,title:"Neutralino.filesystem",description:"Neutralino.filesystem namespace contains methods for handling files.",source:"@site/docs/api/filesystem.md",slug:"/api/filesystem",permalink:"/docs/api/filesystem",editUrl:"https://github.com/neutralinojs/neutralinojs.github.io/edit/main/docs/api/filesystem.md",version:"current",sidebar:"docs",previous:{title:"Neutralino.extensions",permalink:"/docs/api/extensions"},next:{title:"Neutralino.init",permalink:"/docs/api/init"}},o=[{value:"filesystem.createDirectory(path)",id:"filesystemcreatedirectorypath",children:[{value:"Parameters",id:"parameters",children:[]}]},{value:"filesystem.removeDirectory(path)",id:"filesystemremovedirectorypath",children:[{value:"Parameters",id:"parameters-1",children:[]}]},{value:"filesystem.writeFile(filename, data)",id:"filesystemwritefilefilename-data",children:[{value:"Parameters",id:"parameters-2",children:[]}]},{value:"filesystem.appendFile(filename, data)",id:"filesystemappendfilefilename-data",children:[{value:"Parameters",id:"parameters-3",children:[]}]},{value:"filesystem.writeBinaryFile(filename, data)",id:"filesystemwritebinaryfilefilename-data",children:[{value:"Parameters",id:"parameters-4",children:[]}]},{value:"filesystem.appendBinaryFile(filename, data)",id:"filesystemappendbinaryfilefilename-data",children:[{value:"Parameters",id:"parameters-5",children:[]}]},{value:"filesystem.readFile(filename)",id:"filesystemreadfilefilename",children:[{value:"Parameters",id:"parameters-6",children:[]},{value:"Return String (awaited):",id:"return-string-awaited",children:[]}]},{value:"filesystem.readBinaryFile(filename)",id:"filesystemreadbinaryfilefilename",children:[{value:"Parameters",id:"parameters-7",children:[]},{value:"Return Object (awaited):",id:"return-object-awaited",children:[]}]},{value:"filesystem.removeFile(filename)",id:"filesystemremovefilefilename",children:[{value:"Parameters",id:"parameters-8",children:[]}]},{value:"filesystem.readDirectory(path)",id:"filesystemreaddirectorypath",children:[{value:"Parameters",id:"parameters-9",children:[]},{value:"Return Object (awaited):",id:"return-object-awaited-1",children:[]}]},{value:"filesystem.copyFile(source, destination)",id:"filesystemcopyfilesource-destination",children:[{value:"Parameters",id:"parameters-10",children:[]}]},{value:"filesystem.moveFile(source, destination)",id:"filesystemmovefilesource-destination",children:[{value:"Parameters",id:"parameters-11",children:[]}]},{value:"filesystem.getStats(path)",id:"filesystemgetstatspath",children:[{value:"Parameters",id:"parameters-12",children:[]},{value:"Return Object (awaited):",id:"return-object-awaited-2",children:[]}]}],c={toc:o};function b(e){var t=e.components,a=Object(n.a)(e,["components"]);return Object(r.b)("wrapper",Object(i.a)({},c,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"Neutralino.filesystem")," namespace contains methods for handling files."),Object(r.b)("h2",{id:"filesystemcreatedirectorypath"},"filesystem.createDirectory(path)"),Object(r.b)("p",null,"Creates a new directory. Throws ",Object(r.b)("inlineCode",{parentName:"p"},"NE_FS_DIRCRER")," if directory creation is not possible."),Object(r.b)("h3",{id:"parameters"},"Parameters"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"path")," String: New directory path.")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"await Neutralino.filesystem.createDirectory('./newDirectory');\n\nawait Neutralino.filesystem.createDirectory(NL_PATH + '/myFolder');\n")),Object(r.b)("h2",{id:"filesystemremovedirectorypath"},"filesystem.removeDirectory(path)"),Object(r.b)("p",null,"Removes a given directory. Throws ",Object(r.b)("inlineCode",{parentName:"p"},"NE_FS_RMDIRER")," if the removal is not possible."),Object(r.b)("h3",{id:"parameters-1"},"Parameters"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"path")," String: Directory path.")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"await Neutralino.filesystem.removeDirectory('./tmpDirectory');\n")),Object(r.b)("h2",{id:"filesystemwritefilefilename-data"},"filesystem.writeFile(filename, data)"),Object(r.b)("p",null,"Writes a text file. Throws ",Object(r.b)("inlineCode",{parentName:"p"},"NE_FS_FILWRER")," for file write errors."),Object(r.b)("h3",{id:"parameters-2"},"Parameters"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"filename")," String: Filename."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"data")," String: Content of the file.")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"await Neutralino.filesystem.writeFile('./myFile.txt', 'Sample content');\n")),Object(r.b)("h2",{id:"filesystemappendfilefilename-data"},"filesystem.appendFile(filename, data)"),Object(r.b)("p",null,"Appends text content to file. Throws ",Object(r.b)("inlineCode",{parentName:"p"},"NE_FS_FILWRER")," for file write errors. If the provided file doesn't exist,\nthis function creates a new file with ",Object(r.b)("inlineCode",{parentName:"p"},"data"),"."),Object(r.b)("h3",{id:"parameters-3"},"Parameters"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"filename")," String: Filename."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"data")," String: Content to append.")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"await Neutralino.filesystem.appendFile('./myFile.txt', 'Sample ');\nawait Neutralino.filesystem.appendFile('./myFile.txt', 'content');\n")),Object(r.b)("h2",{id:"filesystemwritebinaryfilefilename-data"},"filesystem.writeBinaryFile(filename, data)"),Object(r.b)("p",null,"Writes a binary file. Throws ",Object(r.b)("inlineCode",{parentName:"p"},"NE_FS_FILWRER")," for file write errors."),Object(r.b)("h3",{id:"parameters-4"},"Parameters"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"filename")," String: Filename."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"data")," ArrayBuffer: Content of the binary file as an\n",Object(r.b)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"},"ArrayBuffer"),".")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"let rawBin = new ArrayBuffer(1);\nlet view = new Uint8Array(rawBin);\nview[0] = 64; // Saves ASCII '@' to the binary file\n\nawait Neutralino.filesystem.writeBinaryFile('./myFile.bin', rawBin);\n")),Object(r.b)("h2",{id:"filesystemappendbinaryfilefilename-data"},"filesystem.appendBinaryFile(filename, data)"),Object(r.b)("p",null,"Appends binary data to a file. Throws ",Object(r.b)("inlineCode",{parentName:"p"},"NE_FS_FILWRER")," for file write errors. If the provided file doesn't exist,\nthis function creates a new file with ",Object(r.b)("inlineCode",{parentName:"p"},"data"),"."),Object(r.b)("h3",{id:"parameters-5"},"Parameters"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"filename")," String: Filename."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"data")," ArrayBuffer: Binary content to append as an\n",Object(r.b)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"},"ArrayBuffer"),".")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"let rawBin = new ArrayBuffer(1);\nlet view = new Uint8Array(rawBin);\nview[0] = 64; // Saves ASCII '@' to the binary file\n\nawait Neutralino.filesystem.appendBinaryFile('./myFile.bin', rawBin);\nawait Neutralino.filesystem.appendBinaryFile('./myFile.bin', rawBin);\n")),Object(r.b)("h2",{id:"filesystemreadfilefilename"},"filesystem.readFile(filename)"),Object(r.b)("p",null,"Reads a text file. Throws ",Object(r.b)("inlineCode",{parentName:"p"},"NE_FS_FILRDER")," for file read errors."),Object(r.b)("h3",{id:"parameters-6"},"Parameters"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"filename")," String: Filename."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"pos")," Number (optional): File cursor position in bytes."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"size")," Number (optional): File reader buffer size in bytes.")),Object(r.b)("h3",{id:"return-string-awaited"},"Return String (awaited):"),Object(r.b)("p",null,"File content."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"let data = await Neutralino.filesystem.readFile('./myFile.txt');\nconsole.log(`Content: ${data}`);\n\nlet data = await Neutralino.filesystem.readFile('./myFile.txt', {\n    pos: 2,\n    size: 10\n});\nconsole.log(`Content: ${data}`);\n")),Object(r.b)("h2",{id:"filesystemreadbinaryfilefilename"},"filesystem.readBinaryFile(filename)"),Object(r.b)("p",null,"Reads binary files. Throws ",Object(r.b)("inlineCode",{parentName:"p"},"NE_FS_FILRDER")," for file read errors."),Object(r.b)("h3",{id:"parameters-7"},"Parameters"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"filename")," String: Filename."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"pos")," Number (optional): File cursor position in bytes."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"size")," Number (optional): File reader buffer size in bytes.")),Object(r.b)("h3",{id:"return-object-awaited"},"Return Object (awaited):"),Object(r.b)("p",null,"Content of the binary file as an\n",Object(r.b)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"},"ArrayBuffer"),"."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"let data = await Neutralino.filesystem.readBinaryFile({\n  fileName: './myFile.bin'\n});\nlet view = new Uint8Array(data);\n\nconsole.log('Binary content: ', view);\n")),Object(r.b)("h2",{id:"filesystemremovefilefilename"},"filesystem.removeFile(filename)"),Object(r.b)("p",null,"Removes given file. Throws ",Object(r.b)("inlineCode",{parentName:"p"},"NE_FS_FILRMER")," for file removal errors."),Object(r.b)("h3",{id:"parameters-8"},"Parameters"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"filename")," String: Filename.")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"await Neutralino.filesystem.removeFile('./myFile.txt');\n")),Object(r.b)("h2",{id:"filesystemreaddirectorypath"},"filesystem.readDirectory(path)"),Object(r.b)("p",null,"Reads directory contents. Throws ",Object(r.b)("inlineCode",{parentName:"p"},"NE_FS_NOPATHE")," if the path doesn't exist."),Object(r.b)("h3",{id:"parameters-9"},"Parameters"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"path")," String: File/directory path.")),Object(r.b)("h3",{id:"return-object-awaited-1"},"Return Object (awaited):"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"entry")," String: file name."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"type")," String: The type of the entry (",Object(r.b)("inlineCode",{parentName:"li"},"FILE")," or ",Object(r.b)("inlineCode",{parentName:"li"},"DIRECTORY"),").")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"let entries = await Neutralino.filesystem.readDirectory(NL_PATH);\nconsole.log('Content: ', entries);\n")),Object(r.b)("h2",{id:"filesystemcopyfilesource-destination"},"filesystem.copyFile(source, destination)"),Object(r.b)("p",null,"Copies a file to a new destination. Throws ",Object(r.b)("inlineCode",{parentName:"p"},"NE_FS_COPYFER")," if the system cannot copy the file."),Object(r.b)("h3",{id:"parameters-10"},"Parameters"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"source")," String: Source path."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"destination")," String: Destination path.")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"await Neutralino.filesystem.copyFile('./source.txt', './destination.txt');\n")),Object(r.b)("h2",{id:"filesystemmovefilesource-destination"},"filesystem.moveFile(source, destination)"),Object(r.b)("p",null,"Moves a file to a new destination. Throws ",Object(r.b)("inlineCode",{parentName:"p"},"NE_FS_MOVEFER")," if the system cannot move the file."),Object(r.b)("h3",{id:"parameters-11"},"Parameters"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"source")," String: Source path."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"destination")," String: Destination path.")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"await Neutralino.filesystem.moveFile('./source.txt', './destination.txt');\n")),Object(r.b)("h2",{id:"filesystemgetstatspath"},"filesystem.getStats(path)"),Object(r.b)("p",null,"Returns file statistics for the given path. If the given path doesn't exist or is inaccessible,",Object(r.b)("inlineCode",{parentName:"p"},"NE_FS_NOPATHE")," is thrown.\nTherefore, you can use this method to check for the existance of a file or directory."),Object(r.b)("h3",{id:"parameters-12"},"Parameters"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"path")," String: File or directory path.")),Object(r.b)("h3",{id:"return-object-awaited-2"},"Return Object (awaited):"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"size")," Number: Size in bytes."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"isFile")," Boolean: ",Object(r.b)("inlineCode",{parentName:"li"},"true")," if the path represents a normal file."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"isDirectory")," Boolean: ",Object(r.b)("inlineCode",{parentName:"li"},"true")," if the path represents a directory."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"createdAt")," Number: On Windows, returns Unix milliseconds of the file creation time ","\u2014"," On Unix or Unix-like platforms, returns Unix milliseconds of the last ",Object(r.b)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Inode"},"inode")," modification time."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"modifiedAt")," Number: Unix milliseconds of the last file modification time.")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"let stats = await Neutralino.filesystem.getStats('./sampleVideo.mp4');\nconsole.log('Stats:', stats);\n\n")))}b.isMDXComponent=!0}}]);