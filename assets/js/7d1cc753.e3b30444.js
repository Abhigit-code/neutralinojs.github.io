(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{109:function(e,n,t){"use strict";t.d(n,"a",(function(){return s})),t.d(n,"b",(function(){return p}));var i=t(0),a=t.n(i);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var b=a.a.createContext({}),c=function(e){var n=a.a.useContext(b),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},s=function(e){var n=c(e.components);return a.a.createElement(b.Provider,{value:n},e.children)},w={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},u=a.a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,b=d(e,["components","mdxType","originalType","parentName"]),s=c(t),u=i,p=s["".concat(l,".").concat(u)]||s[u]||w[u]||o;return t?a.a.createElement(p,r(r({ref:n},b),{},{components:t})):a.a.createElement(p,r({ref:n},b))}));function p(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,l=new Array(o);l[0]=u;var r={};for(var d in n)hasOwnProperty.call(n,d)&&(r[d]=n[d]);r.originalType=e,r.mdxType="string"==typeof e?e:i,l[1]=r;for(var b=2;b<o;b++)l[b]=t[b];return a.a.createElement.apply(null,l)}return a.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},89:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return l})),t.d(n,"toc",(function(){return r})),t.d(n,"default",(function(){return b}));var i=t(3),a=(t(0),t(109));const o={title:"Neutralino.window"},l={unversionedId:"api/window",id:"api/window",isDocsHomePage:!1,title:"Neutralino.window",description:"The Neutralino.window namespace contains methods related to the current native window instance.",source:"@site/docs/api/window.md",slug:"/api/window",permalink:"/docs/api/window",editUrl:"https://github.com/neutralinojs/neutralinojs.github.io/edit/main/docs/api/window.md",version:"current",sidebar:"docs",previous:{title:"Neutralino.app",permalink:"/docs/api/app"},next:{title:"Neutralino.filesystem",permalink:"/docs/api/filesystem"}},r=[{value:"window.setTitle(title)",id:"windowsettitletitle",children:[{value:"Parameters",id:"parameters",children:[]}]},{value:"window.getTitle()",id:"windowgettitle",children:[{value:"Return String (awaited):",id:"return-string-awaited",children:[]}]},{value:"window.minimize()",id:"windowminimize",children:[]},{value:"window.maximize()",id:"windowmaximize",children:[]},{value:"window.unmaximize()",id:"windowunmaximize",children:[]},{value:"window.isMaximized()",id:"windowismaximized",children:[{value:"Return Boolean (awaited):",id:"return-boolean-awaited",children:[]}]},{value:"window.setFullScreen()",id:"windowsetfullscreen",children:[]},{value:"window.exitFullScreen()",id:"windowexitfullscreen",children:[]},{value:"window.isFullScreen()",id:"windowisfullscreen",children:[{value:"Return Boolean (awaited):",id:"return-boolean-awaited-1",children:[]}]},{value:"window.show()",id:"windowshow",children:[]},{value:"window.hide()",id:"windowhide",children:[]},{value:"window.isVisible()",id:"windowisvisible",children:[{value:"Return Boolean (awaited):",id:"return-boolean-awaited-2",children:[]}]},{value:"window.focus()",id:"windowfocus",children:[]},{value:"window.move(x, y)",id:"windowmovex-y",children:[{value:"Parameters",id:"parameters-1",children:[]}]},{value:"window.setIcon(icon)",id:"windowseticonicon",children:[{value:"Parameters",id:"parameters-2",children:[]}]},{value:"window.setDraggableRegion(domId)",id:"windowsetdraggableregiondomid",children:[{value:"Parameters",id:"parameters-3",children:[]}]},{value:"window.unsetDraggableRegion(domId)",id:"windowunsetdraggableregiondomid",children:[{value:"Parameters",id:"parameters-4",children:[]}]},{value:"window.setSize(Options)",id:"windowsetsizeoptions",children:[{value:"Options",id:"options",children:[]}]},{value:"window.create(url, WindowOptions)",id:"windowcreateurl-windowoptions",children:[{value:"Parameters",id:"parameters-5",children:[]},{value:"WindowOptions",id:"windowoptions",children:[]},{value:"Return Object (awaited):",id:"return-object-awaited",children:[]}]}],d={toc:r};function b({components:e,...n}){return Object(a.b)("wrapper",Object(i.a)({},d,n,{components:e,mdxType:"MDXLayout"}),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"Neutralino.window")," namespace contains methods related to the current native window instance.\nThis namespace's methods will work only for the ",Object(a.b)("a",{parentName:"p",href:"/docs/configuration/modes#window"},Object(a.b)("inlineCode",{parentName:"a"},"window"))," mode."),Object(a.b)("h2",{id:"windowsettitletitle"},"window.setTitle(title)"),Object(a.b)("p",null,"Sets the title of the native window."),Object(a.b)("h3",{id:"parameters"},"Parameters"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"title")," String (optional): Title of the window. Clears the title, if the function was called without the parameter.")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"await Neutralino.window.setTitle('New title');\n")),Object(a.b)("h2",{id:"windowgettitle"},"window.getTitle()"),Object(a.b)("p",null,"Returns the title of the native window."),Object(a.b)("h3",{id:"return-string-awaited"},"Return String (awaited):"),Object(a.b)("p",null,"The current title of the native window instance."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"let title = await Neutralino.window.getTitle();\nconsole.log(`title = ${title}`);\n")),Object(a.b)("h2",{id:"windowminimize"},"window.minimize()"),Object(a.b)("p",null,"Minimizes the native window."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"await Neutralino.window.minimize();\n")),Object(a.b)("h2",{id:"windowmaximize"},"window.maximize()"),Object(a.b)("p",null,"Maximizes the native window."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"await Neutralino.window.maximize();\n")),Object(a.b)("h2",{id:"windowunmaximize"},"window.unmaximize()"),Object(a.b)("p",null,"Restores the native window."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"await Neutralino.window.unmaximize();\n")),Object(a.b)("h2",{id:"windowismaximized"},"window.isMaximized()"),Object(a.b)("p",null,"Returns ",Object(a.b)("inlineCode",{parentName:"p"},"true")," if the native window is maximized."),Object(a.b)("h3",{id:"return-boolean-awaited"},"Return Boolean (awaited):"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"true")," or ",Object(a.b)("inlineCode",{parentName:"li"},"false")," based on current maximized status.")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"let status = await Neutralino.window.isMaximized();\n")),Object(a.b)("h2",{id:"windowsetfullscreen"},"window.setFullScreen()"),Object(a.b)("p",null,"Enables the full screen mode."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"await Neutralino.window.setFullScreen();\n")),Object(a.b)("h2",{id:"windowexitfullscreen"},"window.exitFullScreen()"),Object(a.b)("p",null,"Exits from the full screen mode."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"await Neutralino.window.exitFullScreen();\n")),Object(a.b)("h2",{id:"windowisfullscreen"},"window.isFullScreen()"),Object(a.b)("p",null,"Returns ",Object(a.b)("inlineCode",{parentName:"p"},"true")," if the native window is in the full screen mode."),Object(a.b)("h3",{id:"return-boolean-awaited-1"},"Return Boolean (awaited):"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"true")," or ",Object(a.b)("inlineCode",{parentName:"li"},"false")," based on current full screen status.")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"let status = await Neutralino.window.isFullScreen();\n")),Object(a.b)("h2",{id:"windowshow"},"window.show()"),Object(a.b)("p",null,"Shows the native window."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"await Neutralino.window.show();\n")),Object(a.b)("h2",{id:"windowhide"},"window.hide()"),Object(a.b)("p",null,"Hides the native window."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"await Neutralino.window.hide();\n")),Object(a.b)("h2",{id:"windowisvisible"},"window.isVisible()"),Object(a.b)("p",null,"Returns ",Object(a.b)("inlineCode",{parentName:"p"},"true")," if the native window is visible."),Object(a.b)("h3",{id:"return-boolean-awaited-2"},"Return Boolean (awaited):"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"true")," or ",Object(a.b)("inlineCode",{parentName:"li"},"false")," based on current visibility status.")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"let status = await Neutralino.window.isVisible();\n")),Object(a.b)("h2",{id:"windowfocus"},"window.focus()"),Object(a.b)("p",null,"Focuses the native window."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"await Neutralino.window.focus();\n")),Object(a.b)("h2",{id:"windowmovex-y"},"window.move(x, y)"),Object(a.b)("p",null,"Moves the native window into given coordinates. Neutralinojs's cross-platform coordinate system starts from top-left corner of the screen.\nIn other words, ",Object(a.b)("inlineCode",{parentName:"p"},"x=0,y=0")," point refers to the top-left corner of the device's main screen."),Object(a.b)("h3",{id:"parameters-1"},"Parameters"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"x")," Number: A integer value for the horizontal position."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"y")," Number: A integer value for the vertical position.")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"await Neutralino.window.move(200, 400);\n")),Object(a.b)("h2",{id:"windowseticonicon"},"window.setIcon(icon)"),Object(a.b)("p",null,"Sets an icon for the native window or Dock.\xa0"),Object(a.b)("h3",{id:"parameters-2"},"Parameters"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"icon")," String: Path of the icon. A ",Object(a.b)("inlineCode",{parentName:"li"},"200x200")," PNG image file works fine on all supported operating systems.")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"const icon = '/resources/icons/appIcon.png';\nawait Neutralino.window.setIcon(icon);\n")),Object(a.b)("h2",{id:"windowsetdraggableregiondomid"},"window.setDraggableRegion(domId)"),Object(a.b)("p",null,"Converts a given DOM element to a draggable region. The user will be able to drag the native window by dragging the given DOM element. This feature is suitable to make custom window bars along with the ",Object(a.b)("a",{parentName:"p",href:"../configuration/neutralino.config.json#modeswindowborderless-boolean"},"borderless mode"),"."),Object(a.b)("h3",{id:"parameters-3"},"Parameters"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"domId")," String | HTMLElement: A DOM element identifier.")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"await Neutralino.window.setDraggableRegion('myCustomTitleBar');\n")),Object(a.b)("h2",{id:"windowunsetdraggableregiondomid"},"window.unsetDraggableRegion(domId)"),Object(a.b)("p",null,"Converts a draggable region to a normal DOM elements by removing drag event handlers."),Object(a.b)("h3",{id:"parameters-4"},"Parameters"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"domId")," String | HTMLElement: A DOM element identifier.")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"await Neutralino.window.unsetDraggableRegion('myCustomTitleBar');\n")),Object(a.b)("h2",{id:"windowsetsizeoptions"},"window.setSize(Options)"),Object(a.b)("p",null,"This method sets the size of the window."),Object(a.b)("h3",{id:"options"},"Options"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"width")," Number (optional): Window width in pixels."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"height")," Number (optional): Window height in pixels."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"minWidth")," Number (optional): Minimum width of the window in pixels."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"minHeight")," Number (optional): Minimum height of the window in pixels."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"maxWidth")," Number (optional): Maximum width of the window in pixels."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"maxHeight")," Number (optional): Maximum height of the window in pixels."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"resizable")," Boolean (optional): A boolean value to make the window resizable or fixed.")),Object(a.b)("p",null,"This method always expects width and height couples.\nFor example, if you are setting ",Object(a.b)("inlineCode",{parentName:"p"},"minWidth"),", you should set ",Object(a.b)("inlineCode",{parentName:"p"},"minHeight")," too."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"await Neutralino.window.setSize({\n    width: 500,\n    height: 200,\n    maxWidth: 600,\n    maxHeight: 400\n});\n\nawait Neutralino.window.setSize({\n    resizable: false\n});\n")),Object(a.b)("h2",{id:"windowcreateurl-windowoptions"},"window.create(url, WindowOptions)"),Object(a.b)("p",null,"Creates a native window. You can use this method to create new window for your multi-window Neutralinojs app.\nNeutralinojs spawns a new process for each native window. Therefore, the new window works as an isolated app once the window is created."),Object(a.b)("p",null,"However, you can build communication streams between windows with the ",Object(a.b)("a",{parentName:"p",href:"/docs/api/storage"},"storage API"),"."),Object(a.b)("h3",{id:"parameters-5"},"Parameters"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"url")," String: URL to be loaded. Eg: ",Object(a.b)("inlineCode",{parentName:"li"},"/resources/aboutWindow.html"),"."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"options")," (optional): an instance of ",Object(a.b)("inlineCode",{parentName:"li"},"WindowOptions")," type.")),Object(a.b)("h3",{id:"windowoptions"},"WindowOptions"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"title")," String: Window title."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"icon")," String: Window icon path."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"fullScreen")," Boolean: Sets full screen mode."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"alwaysOnTop")," Boolean: Activates the top-most mode."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"enableInspector")," Boolean: Activates developer tools and opens the web inspector window."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"borderless")," Boolean: Makes the window borderless."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"maximize")," Boolean: Launches the window maximized."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"hidden")," Boolean: Hides the window."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"maximizable")," Boolean: Makes the window maximizable or not."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"exitProcessOnClose")," Boolean: Exits the application process when the user clicks the window's close button."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"processArgs")," String: Additional command-line arguments for the new window process.")),Object(a.b)("h3",{id:"return-object-awaited"},"Return Object (awaited):"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"pid")," Number: Process identifier."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"stdOut")," String: Standard output. This value is always empty since the new window process starts asynchronously."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"stdErr")," String: Standard error. This value is always empty since the new window process starts asynchronously."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"exitCode")," Number: Exit code of the process.")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"await Neutralino.window.create('/resources/aboutWindow.html', {\n    icon: '/resources/icons/aboutIcon.png',\n    enableInspector: false,\n    width: 500,\n    height: 300,\n    maximizable: false,\n    exitProcessOnClose: true,\n    processArgs: '--window-id=W_ABOUT'\n});\n")))}b.isMDXComponent=!0}}]);