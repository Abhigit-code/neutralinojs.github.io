(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{121:function(e,t,a){"use strict";a.d(t,"a",(function(){return d})),a.d(t,"b",(function(){return u}));var i=a(0),n=a.n(i);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,i)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function b(e,t){if(null==e)return{};var a,i,n=function(e,t){if(null==e)return{};var a,i,n={},r=Object.keys(e);for(i=0;i<r.length;i++)a=r[i],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)a=r[i],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var c=n.a.createContext({}),o=function(e){var t=n.a.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},d=function(e){var t=o(e.components);return n.a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.a.createElement(n.a.Fragment,{},t)}},p=n.a.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,c=b(e,["components","mdxType","originalType","parentName"]),d=o(a),p=i,u=d["".concat(l,".").concat(p)]||d[p]||m[p]||r;return a?n.a.createElement(u,s(s({ref:t},c),{},{components:a})):n.a.createElement(u,s({ref:t},c))}));function u(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,l=new Array(r);l[0]=p;var s={};for(var b in t)hasOwnProperty.call(t,b)&&(s[b]=t[b]);s.originalType=e,s.mdxType="string"==typeof e?e:i,l[1]=s;for(var c=2;c<r;c++)l[c]=a[c];return n.a.createElement.apply(null,l)}return n.a.createElement.apply(null,a)}p.displayName="MDXCreateElement"},91:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return l})),a.d(t,"metadata",(function(){return s})),a.d(t,"toc",(function(){return b})),a.d(t,"default",(function(){return o}));var i=a(3),n=a(8),r=(a(0),a(121)),l={title:"Neutralino.filesystem"},s={unversionedId:"api/filesystem",id:"api/filesystem",isDocsHomePage:!1,title:"Neutralino.filesystem",description:"Neutralino.filesystem namespace contains methods for handling files.",source:"@site/docs/api/filesystem.md",slug:"/api/filesystem",permalink:"/docs/api/filesystem",editUrl:"https://github.com/neutralinojs/neutralinojs.github.io/edit/main/docs/api/filesystem.md",version:"current",sidebar:"docs",previous:{title:"Neutralino.extensions",permalink:"/docs/api/extensions"},next:{title:"Neutralino.init",permalink:"/docs/api/init"}},b=[{value:"filesystem.createDirectory(path)",id:"filesystemcreatedirectorypath",children:[{value:"Parameters",id:"parameters",children:[]}]},{value:"filesystem.removeDirectory(path)",id:"filesystemremovedirectorypath",children:[{value:"Parameters",id:"parameters-1",children:[]}]},{value:"filesystem.writeFile(filename, data)",id:"filesystemwritefilefilename-data",children:[{value:"Parameters",id:"parameters-2",children:[]}]},{value:"filesystem.appendFile(filename, data)",id:"filesystemappendfilefilename-data",children:[{value:"Parameters",id:"parameters-3",children:[]}]},{value:"filesystem.writeBinaryFile(filename, data)",id:"filesystemwritebinaryfilefilename-data",children:[{value:"Parameters",id:"parameters-4",children:[]}]},{value:"filesystem.appendBinaryFile(filename, data)",id:"filesystemappendbinaryfilefilename-data",children:[{value:"Parameters",id:"parameters-5",children:[]}]},{value:"filesystem.readFile(filename)",id:"filesystemreadfilefilename",children:[{value:"Parameters",id:"parameters-6",children:[]},{value:"Return String (awaited):",id:"return-string-awaited",children:[]}]},{value:"filesystem.readBinaryFile(filename)",id:"filesystemreadbinaryfilefilename",children:[{value:"Parameters",id:"parameters-7",children:[]},{value:"Return Object (awaited):",id:"return-object-awaited",children:[]}]},{value:"filesystem.openFile(filename)",id:"filesystemopenfilefilename",children:[{value:"Parameters",id:"parameters-8",children:[]},{value:"Return Number (awaited):",id:"return-number-awaited",children:[]}]},{value:"filesystem.updateOpenedFile(id, action, data)",id:"filesystemupdateopenedfileid-action-data",children:[{value:"Parameters",id:"parameters-9",children:[]}]},{value:"filesystem.getOpenedFileInfo(id)",id:"filesystemgetopenedfileinfoid",children:[{value:"Parameters",id:"parameters-10",children:[]},{value:"Return Object (awaited):",id:"return-object-awaited-1",children:[]}]},{value:"filesystem.createWatcher(path)",id:"filesystemcreatewatcherpath",children:[{value:"Parameters",id:"parameters-11",children:[]},{value:"Return Number (awaited):",id:"return-number-awaited-1",children:[]}]},{value:"filesystem.removeWatcher(watcherId)",id:"filesystemremovewatcherwatcherid",children:[{value:"Parameters",id:"parameters-12",children:[]},{value:"Return Number (awaited):",id:"return-number-awaited-2",children:[]}]},{value:"filesystem.getWatchers()",id:"filesystemgetwatchers",children:[{value:"Return Object (awaited):",id:"return-object-awaited-2",children:[]},{value:"FileWatcher",id:"filewatcher",children:[]}]},{value:"filesystem.removeFile(filename)",id:"filesystemremovefilefilename",children:[{value:"Parameters",id:"parameters-13",children:[]}]},{value:"filesystem.readDirectory(path)",id:"filesystemreaddirectorypath",children:[{value:"Parameters",id:"parameters-14",children:[]},{value:"Return Object (awaited):",id:"return-object-awaited-3",children:[]},{value:"DirectoryEntry",id:"directoryentry",children:[]}]},{value:"filesystem.copyFile(source, destination)",id:"filesystemcopyfilesource-destination",children:[{value:"Parameters",id:"parameters-15",children:[]}]},{value:"filesystem.moveFile(source, destination)",id:"filesystemmovefilesource-destination",children:[{value:"Parameters",id:"parameters-16",children:[]}]},{value:"filesystem.getStats(path)",id:"filesystemgetstatspath",children:[{value:"Parameters",id:"parameters-17",children:[]},{value:"Return Object (awaited):",id:"return-object-awaited-4",children:[]}]}],c={toc:b};function o(e){var t=e.components,a=Object(n.a)(e,["components"]);return Object(r.b)("wrapper",Object(i.a)({},c,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"Neutralino.filesystem")," namespace contains methods for handling files."),Object(r.b)("h2",{id:"filesystemcreatedirectorypath"},"filesystem.createDirectory(path)"),Object(r.b)("p",null,"Creates a new directory. Throws ",Object(r.b)("inlineCode",{parentName:"p"},"NE_FS_DIRCRER")," if directory creation is not possible."),Object(r.b)("h3",{id:"parameters"},"Parameters"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"path")," String: New directory path.")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"await Neutralino.filesystem.createDirectory('./newDirectory');\n\nawait Neutralino.filesystem.createDirectory(NL_PATH + '/myFolder');\n")),Object(r.b)("h2",{id:"filesystemremovedirectorypath"},"filesystem.removeDirectory(path)"),Object(r.b)("p",null,"Removes a given directory. Throws ",Object(r.b)("inlineCode",{parentName:"p"},"NE_FS_RMDIRER")," if the removal is not possible."),Object(r.b)("h3",{id:"parameters-1"},"Parameters"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"path")," String: Directory path.")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"await Neutralino.filesystem.removeDirectory('./tmpDirectory');\n")),Object(r.b)("h2",{id:"filesystemwritefilefilename-data"},"filesystem.writeFile(filename, data)"),Object(r.b)("p",null,"Writes a text file. Throws ",Object(r.b)("inlineCode",{parentName:"p"},"NE_FS_FILWRER")," for file write errors."),Object(r.b)("h3",{id:"parameters-2"},"Parameters"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"filename")," String: Filename."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"data")," String: Content of the file.")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"await Neutralino.filesystem.writeFile('./myFile.txt', 'Sample content');\n")),Object(r.b)("h2",{id:"filesystemappendfilefilename-data"},"filesystem.appendFile(filename, data)"),Object(r.b)("p",null,"Appends text content to file. Throws ",Object(r.b)("inlineCode",{parentName:"p"},"NE_FS_FILWRER")," for file write errors. If the provided file doesn't exist,\nthis function creates a new file with ",Object(r.b)("inlineCode",{parentName:"p"},"data"),"."),Object(r.b)("h3",{id:"parameters-3"},"Parameters"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"filename")," String: Filename."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"data")," String: Content to append.")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"await Neutralino.filesystem.appendFile('./myFile.txt', 'Sample ');\nawait Neutralino.filesystem.appendFile('./myFile.txt', 'content');\n")),Object(r.b)("h2",{id:"filesystemwritebinaryfilefilename-data"},"filesystem.writeBinaryFile(filename, data)"),Object(r.b)("p",null,"Writes a binary file. Throws ",Object(r.b)("inlineCode",{parentName:"p"},"NE_FS_FILWRER")," for file write errors."),Object(r.b)("h3",{id:"parameters-4"},"Parameters"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"filename")," String: Filename."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"data")," ArrayBuffer: Content of the binary file as an\n",Object(r.b)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"},"ArrayBuffer"),".")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"let rawBin = new ArrayBuffer(1);\nlet view = new Uint8Array(rawBin);\nview[0] = 64; // Saves ASCII '@' to the binary file\n\nawait Neutralino.filesystem.writeBinaryFile('./myFile.bin', rawBin);\n")),Object(r.b)("h2",{id:"filesystemappendbinaryfilefilename-data"},"filesystem.appendBinaryFile(filename, data)"),Object(r.b)("p",null,"Appends binary data to a file. Throws ",Object(r.b)("inlineCode",{parentName:"p"},"NE_FS_FILWRER")," for file write errors. If the provided file doesn't exist,\nthis function creates a new file with ",Object(r.b)("inlineCode",{parentName:"p"},"data"),"."),Object(r.b)("h3",{id:"parameters-5"},"Parameters"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"filename")," String: Filename."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"data")," ArrayBuffer: Binary content to append as an\n",Object(r.b)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"},"ArrayBuffer"),".")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"let rawBin = new ArrayBuffer(1);\nlet view = new Uint8Array(rawBin);\nview[0] = 64; // Saves ASCII '@' to the binary file\n\nawait Neutralino.filesystem.appendBinaryFile('./myFile.bin', rawBin);\nawait Neutralino.filesystem.appendBinaryFile('./myFile.bin', rawBin);\n")),Object(r.b)("h2",{id:"filesystemreadfilefilename"},"filesystem.readFile(filename)"),Object(r.b)("p",null,"Reads a text file. Throws ",Object(r.b)("inlineCode",{parentName:"p"},"NE_FS_FILRDER")," for file read errors."),Object(r.b)("h3",{id:"parameters-6"},"Parameters"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"filename")," String: Filename."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"pos")," Number (optional): File cursor position in bytes."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"size")," Number (optional): File reader buffer size in bytes.")),Object(r.b)("h3",{id:"return-string-awaited"},"Return String (awaited):"),Object(r.b)("p",null,"File content."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"let data = await Neutralino.filesystem.readFile('./myFile.txt');\nconsole.log(`Content: ${data}`);\n\nlet data = await Neutralino.filesystem.readFile('./myFile.txt', {\n    pos: 2,\n    size: 10\n});\nconsole.log(`Content: ${data}`);\n")),Object(r.b)("h2",{id:"filesystemreadbinaryfilefilename"},"filesystem.readBinaryFile(filename)"),Object(r.b)("p",null,"Reads binary files. Throws ",Object(r.b)("inlineCode",{parentName:"p"},"NE_FS_FILRDER")," for file read errors."),Object(r.b)("h3",{id:"parameters-7"},"Parameters"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"filename")," String: Filename."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"pos")," Number (optional): File cursor position in bytes."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"size")," Number (optional): File reader buffer size in bytes.")),Object(r.b)("h3",{id:"return-object-awaited"},"Return Object (awaited):"),Object(r.b)("p",null,"Content of the binary file as an\n",Object(r.b)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"},"ArrayBuffer"),"."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"let data = await Neutralino.filesystem.readBinaryFile({\n  fileName: './myFile.bin'\n});\nlet view = new Uint8Array(data);\n\nconsole.log('Binary content: ', view);\n")),Object(r.b)("h2",{id:"filesystemopenfilefilename"},"filesystem.openFile(filename)"),Object(r.b)("p",null,"Creates a readable file stream. Throws ",Object(r.b)("inlineCode",{parentName:"p"},"NE_FS_FILOPER")," for file open errors."),Object(r.b)("h3",{id:"parameters-8"},"Parameters"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"filename")," String: Filename.")),Object(r.b)("h3",{id:"return-number-awaited"},"Return Number (awaited):"),Object(r.b)("p",null,"File stream identifier."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"let fileId = await Neutralino.filesystem.openFile('./myFile.txt');\nconsole.log(`ID: ${fileId}`);\n")),Object(r.b)("h2",{id:"filesystemupdateopenedfileid-action-data"},"filesystem.updateOpenedFile(id, action, data)"),Object(r.b)("p",null,"Invokes file stream actions. Throws ",Object(r.b)("inlineCode",{parentName:"p"},"NE_FS_UNLTOUP")," if the framework can't update the stream. Call this method\nto read and seek an opened file (aka a readable stream)."),Object(r.b)("h3",{id:"parameters-9"},"Parameters"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"id")," Number: File stream identifier."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"action")," String: An action to take. Accepts only the following values:",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"read"),": Reads a bytes segment from the file stream."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"readBinary"),": Behaves the same as ",Object(r.b)("inlineCode",{parentName:"li"},"read")," but uses the binary read mode."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"readAll"),": Triggers the ",Object(r.b)("inlineCode",{parentName:"li"},"read")," action until file stream cursor position reaches\n",Object(r.b)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/End-of-file"},"EOF"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"readAllBinary"),": Behaves the same as ",Object(r.b)("inlineCode",{parentName:"li"},"readAll")," but uses the binary read mode."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"seek"),": Sets the file cursor position."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"close"),": Closes and frees file handler resources."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"data")," Object (optional): Additional data for the ",Object(r.b)("inlineCode",{parentName:"li"},"action"),". Send the buffer size in bytes (default: 256 bytes)\nif the ",Object(r.b)("inlineCode",{parentName:"li"},"action")," is ",Object(r.b)("inlineCode",{parentName:"li"},"read"),", ",Object(r.b)("inlineCode",{parentName:"li"},"readBinary"),", ",Object(r.b)("inlineCode",{parentName:"li"},"readAll"),", or ",Object(r.b)("inlineCode",{parentName:"li"},"readAllBinary"),". Send the file stream cursor position if the action is ",Object(r.b)("inlineCode",{parentName:"li"},"seek"),".")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"let fileId = await Neutralino.filesystem.openFile('./myFile.txt');\n\nlet content = '';\nNeutralino.events.on('openedFile', (evt) => {\n  if(evt.detail.id == fileId) {\n    switch(evt.detail.action) {\n      case 'data':\n        content += evt.detail.data;\n        break;\n      case 'end':\n        console.log(content);\n        break;\n    }\n  }\n});\n\n// Sets the file stream cursor to 10th byte\nawait Neutralino.filesystem.updateOpenedFile(fileId, 'seek', 10);\n// Reads 2 bytes from the cursor position\nawait Neutralino.filesystem.updateOpenedFile(fileId, 'read', 2);\n// Reads the next bytes until the cursor reaches EOF (buffer size: 2)\nawait Neutralino.filesystem.updateOpenedFile(fileId, 'readAll', 2);\n")),Object(r.b)("h2",{id:"filesystemgetopenedfileinfoid"},"filesystem.getOpenedFileInfo(id)"),Object(r.b)("p",null,"Returns file stream details. Throws ",Object(r.b)("inlineCode",{parentName:"p"},"NE_FS_UNLTFOP")," if the file stream identifier is not valid."),Object(r.b)("h3",{id:"parameters-10"},"Parameters"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"id")," Number: File stream identifier.")),Object(r.b)("h3",{id:"return-object-awaited-1"},"Return Object (awaited):"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"id")," Number: File stream identifier."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"eof")," Boolean: Becomes ",Object(r.b)("inlineCode",{parentName:"li"},"true")," if the stream reached EOF."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"pos")," Number: File stream cursor position."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"lastRead")," Number: Last read bytes.")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"let info = await Neutralino.filesystem.getOpenedFileInfo(0);\nconsole.log(info);\n")),Object(r.b)("h2",{id:"filesystemcreatewatcherpath"},"filesystem.createWatcher(path)"),Object(r.b)("p",null,"Creates a filesystem watcher. Throws ",Object(r.b)("inlineCode",{parentName:"p"},"NE_FS_UNLCWAT")," for watcher creation failures. If there is an existing\nactive watcher for the given path, this function returns the existing watcher identifier."),Object(r.b)("h3",{id:"parameters-11"},"Parameters"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"path")," String: Directory path.")),Object(r.b)("h3",{id:"return-number-awaited-1"},"Return Number (awaited):"),Object(r.b)("p",null,"File watcher identifier."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"let watcherId = await Neutralino.filesystem.createWatcher(NL_PATH);\nNeutralino.events.on('watchFile', (evt) => {\n    if(watcherId == evt.detail.id) {\n        console.log(evt.detail);\n    }\n});\nconsole.log(`ID: ${watcherId}`);\n")),Object(r.b)("h2",{id:"filesystemremovewatcherwatcherid"},"filesystem.removeWatcher(watcherId)"),Object(r.b)("p",null,"Removes a filesystem watcher. Throws ",Object(r.b)("inlineCode",{parentName:"p"},"NE_FS_NOWATID")," for watcher removal failures."),Object(r.b)("h3",{id:"parameters-12"},"Parameters"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"watcherId")," Number: File watcher identifier.")),Object(r.b)("h3",{id:"return-number-awaited-2"},"Return Number (awaited):"),Object(r.b)("p",null,"File watcher identifier."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"let watcherId = await Neutralino.filesystem.createWatcher(NL_PATH);\nconsole.log(`ID: ${watcherId}`);\nawait Neutralino.filesystem.removeWatcher(watcherId);\n")),Object(r.b)("h2",{id:"filesystemgetwatchers"},"filesystem.getWatchers()"),Object(r.b)("p",null,"Returns information about created file watchers."),Object(r.b)("h3",{id:"return-object-awaited-2"},"Return Object (awaited):"),Object(r.b)("p",null,"An array of ",Object(r.b)("inlineCode",{parentName:"p"},"FileWatcher")," objects."),Object(r.b)("h3",{id:"filewatcher"},"FileWatcher"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"id")," Number: Watcher identifier."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"path")," String: File watcher path.")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"let watchers = await Neutralino.filesystem.getWatchers();\nfor(let watcher of watchers) {\n    console.log(watcher);\n}\n")),Object(r.b)("h2",{id:"filesystemremovefilefilename"},"filesystem.removeFile(filename)"),Object(r.b)("p",null,"Removes given file. Throws ",Object(r.b)("inlineCode",{parentName:"p"},"NE_FS_FILRMER")," for file removal errors."),Object(r.b)("h3",{id:"parameters-13"},"Parameters"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"filename")," String: Filename.")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"await Neutralino.filesystem.removeFile('./myFile.txt');\n")),Object(r.b)("h2",{id:"filesystemreaddirectorypath"},"filesystem.readDirectory(path)"),Object(r.b)("p",null,"Reads directory contents. Throws ",Object(r.b)("inlineCode",{parentName:"p"},"NE_FS_NOPATHE")," if the path doesn't exist."),Object(r.b)("h3",{id:"parameters-14"},"Parameters"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"path")," String: File/directory path.")),Object(r.b)("h3",{id:"return-object-awaited-3"},"Return Object (awaited):"),Object(r.b)("p",null,"An array of ",Object(r.b)("inlineCode",{parentName:"p"},"DirectoryEntry")," objects."),Object(r.b)("h3",{id:"directoryentry"},"DirectoryEntry"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"entry")," String: file name."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"type")," String: The type of the entry (",Object(r.b)("inlineCode",{parentName:"li"},"FILE")," or ",Object(r.b)("inlineCode",{parentName:"li"},"DIRECTORY"),").")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"let entries = await Neutralino.filesystem.readDirectory(NL_PATH);\nconsole.log('Content: ', entries);\n")),Object(r.b)("h2",{id:"filesystemcopyfilesource-destination"},"filesystem.copyFile(source, destination)"),Object(r.b)("p",null,"Copies a file to a new destination. Throws ",Object(r.b)("inlineCode",{parentName:"p"},"NE_FS_COPYFER")," if the system cannot copy the file."),Object(r.b)("h3",{id:"parameters-15"},"Parameters"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"source")," String: Source path."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"destination")," String: Destination path.")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"await Neutralino.filesystem.copyFile('./source.txt', './destination.txt');\n")),Object(r.b)("h2",{id:"filesystemmovefilesource-destination"},"filesystem.moveFile(source, destination)"),Object(r.b)("p",null,"Moves a file to a new destination. Throws ",Object(r.b)("inlineCode",{parentName:"p"},"NE_FS_MOVEFER")," if the system cannot move the file."),Object(r.b)("h3",{id:"parameters-16"},"Parameters"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"source")," String: Source path."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"destination")," String: Destination path.")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"await Neutralino.filesystem.moveFile('./source.txt', './destination.txt');\n")),Object(r.b)("h2",{id:"filesystemgetstatspath"},"filesystem.getStats(path)"),Object(r.b)("p",null,"Returns file statistics for the given path. If the given path doesn't exist or is inaccessible,",Object(r.b)("inlineCode",{parentName:"p"},"NE_FS_NOPATHE")," is thrown.\nTherefore, you can use this method to check for the existance of a file or directory."),Object(r.b)("h3",{id:"parameters-17"},"Parameters"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"path")," String: File or directory path.")),Object(r.b)("h3",{id:"return-object-awaited-4"},"Return Object (awaited):"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"size")," Number: Size in bytes."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"isFile")," Boolean: ",Object(r.b)("inlineCode",{parentName:"li"},"true")," if the path represents a normal file."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"isDirectory")," Boolean: ",Object(r.b)("inlineCode",{parentName:"li"},"true")," if the path represents a directory."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"createdAt")," Number: On Windows, returns Unix milliseconds of the file creation time ","\u2014"," On Unix or Unix-like platforms, returns Unix milliseconds of the last ",Object(r.b)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Inode"},"inode")," modification time."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"modifiedAt")," Number: Unix milliseconds of the last file modification time.")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"let stats = await Neutralino.filesystem.getStats('./sampleVideo.mp4');\nconsole.log('Stats:', stats);\n\n")))}o.isMDXComponent=!0}}]);